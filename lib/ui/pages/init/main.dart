import 'dart:async';
import 'dart:convert';

import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:material_symbols_icons/symbols.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:restart_app/restart_app.dart';
import 'package:student/core/databases/server.dart';
import 'package:student/core/databases/shared_prefs.dart';
import 'package:student/misc/misc_widget.dart';
import 'package:student/ui/pages/init/fill_form.dart';
// import 'package:student/core/databases/user.dart';

class Initializer extends StatefulWidget {
  const Initializer({super.key});

  @override
  State<Initializer> createState() => _InitializerState();
}

class _InitializerState extends State<Initializer> {
  double invalidOpacity = 0;
  final MobileScannerController controller = MobileScannerController(
    formats: [BarcodeFormat.qrCode],
    // required options for the scanner
  );

  void checkValidUser(Map<String, dynamic> data) {
    data["id"] as String;
    data["name"] as String;
    data["group"] as int;
    data["semester"] as int;
    data["schoolYear"] as int;
    data["learning"] as List;
  }

  void _handleBarcode(BarcodeCapture? barcodes) {
    if (barcodes == null || !mounted) return;

    Barcode? barcode = barcodes.barcodes.firstOrNull;
    if (barcode == null) return;

    Server.iCM.downloadFile(barcode.displayValue!).then((value) {
      Map<String, dynamic> parsed = jsonDecode(value.file.readAsStringSync());

      try {
        checkValidUser(parsed["user"]);
        SharedPrefs.setString("user", parsed["user"]).then((_) {
          SharedPrefs.setString("env", parsed["env"]).then(
            (_) => Restart.restartApp(),
          );
        });
      } catch (e) {
        setState(() {
          invalidOpacity = 1;
        });
        SharedPrefs.clear();
        Future.delayed(const Duration(seconds: 3), () {
          setState(() {
            invalidOpacity = 0;
          });
        });
      }
    });
  }

  @override
  Future<void> dispose() async {
    super.dispose();
    await controller.dispose();
  }

  @override
  Widget build(BuildContext context) {
    ColorScheme colorScheme = Theme.of(context).colorScheme;
    TextTheme textTheme = Theme.of(context).textTheme;
    ButtonStyle style = TextButton.styleFrom(
      backgroundColor: colorScheme.surface,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(8),
      ),
    );
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: const Text("Scan code generated by the Extension"),
        centerTitle: true,
      ),
      body: Stack(children: [
        MobileScanner(
          controller: controller,
          // fit: BoxFit.contain,
          onDetect: _handleBarcode,
        ),
        Positioned(
          bottom: 16,
          child: Container(
            padding: const EdgeInsets.all(16),
            width: MediaQuery.of(context).size.width,
            height: 256,
            child: Column(children: [
              AnimatedOpacity(
                opacity: invalidOpacity,
                duration: const Duration(milliseconds: 300),
                child: Container(
                  padding: const EdgeInsets.all(16),
                  alignment: Alignment.center,
                  decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(8),
                      color: colorScheme.surface),
                  child: const Text(
                      "QR Code scanned is invalid, please try again!"),
                ),
              ),
              MWds.divider(16),
              Row(children: [
                TextButton.icon(
                  onPressed: () {
                    FilePicker.platform
                        .pickFiles(type: FileType.image)
                        .then((f) {
                      if (f == null) return;
                      controller
                          .analyzeImage(f.files.single.path!)
                          .then(_handleBarcode);
                    });
                  },
                  icon: const Icon(Symbols.upload),
                  label: const Text("Use picture"),
                  style: style,
                ),
                const VerticalDivider(
                  width: 16,
                  color: Colors.transparent,
                ),
                TextButton.icon(
                  onPressed: () {
                    Navigator.of(context).push(MaterialPageRoute(
                      builder: (context) => const FillForm(),
                    ));
                  },
                  icon: const Icon(Symbols.edit),
                  label: const Text("Fill manually"),
                  style: style,
                ),
              ])
            ]),
          ),
        )
      ]),
    );
  }
}
